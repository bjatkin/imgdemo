package hide

import (
	"image"
	"image/color"
	"reflect"
	"testing"
)

func Test_hideData(t *testing.T) {
	type args struct {
		data  []byte
		image *image.NRGBA
	}
	tests := []struct {
		name string
		args args
		want *image.NRGBA
	}{
		{
			name: "hide data",
			args: args{
				data: []byte{0b1101_0001, 0b0001_1001},
				image: newTestImage([...]color.NRGBA{
					{0xA0, 0xB0, 0xC0, 0xD0}, {0xA0, 0xB0, 0xC0, 0xD0}, {0xA0, 0xB0, 0xC0, 0xD0}, {0xA0, 0xB0, 0xC0, 0xD0},
					{0xA0, 0xB0, 0xC0, 0xD0}, {0xA0, 0xB0, 0xC0, 0xD0}, {0xA0, 0xB0, 0xC0, 0xD0}, {0xA0, 0xB0, 0xC0, 0xD0},
					{0xA0, 0xB0, 0xC0, 0xD0}, {0xA0, 0xB0, 0xC0, 0xD0}, {0xA0, 0xB0, 0xC0, 0xD0}, {0xA0, 0xB0, 0xC0, 0xD0},
					{0xA0, 0xB0, 0xC0, 0xD0}, {0xA0, 0xB0, 0xC0, 0xD0}, {0xA0, 0xB0, 0xC0, 0xD0}, {0xA0, 0xB0, 0xC0, 0xD0},
				}),
			},
			want: newTestImage([...]color.NRGBA{
				{0xA0, 0xB0, 0xC0, 0xD1}, {0xA0, 0xB0, 0xC1, 0xD1}, {0xA0, 0xB0, 0xC1, 0xD1}, {0xA0, 0xB1, 0xC1, 0xD1},
				{0xA0, 0xB0, 0xC0, 0xD0}, {0xA0, 0xB0, 0xC0, 0xD0}, {0xA0, 0xB0, 0xC0, 0xD0}, {0xA0, 0xB0, 0xC1, 0xD0},
				{0xA1, 0xB1, 0xC0, 0xD1}, {0xA0, 0xB0, 0xC0, 0xD1}, {0xA0, 0xB0, 0xC0, 0xD1}, {0xA1, 0xB0, 0xC0, 0xD1},
				{0xA0, 0xB0, 0xC0, 0xD0}, {0xA0, 0xB0, 0xC0, 0xD0}, {0xA0, 0xB0, 0xC0, 0xD0}, {0xA0, 0xB0, 0xC0, 0xD0},
			}),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			hideData(tt.args.data, tt.args.image)
			if !reflect.DeepEqual(tt.args.image, tt.want) {
				t.Errorf("HideData(): data was not successfully hidden")
			}
		})
	}
}

func newTestImage(colors [16]color.NRGBA) *image.NRGBA {
	shape := 4
	img := image.NewNRGBA(image.Rect(0, 0, shape, shape))
	for y := 0; y < shape; y++ {
		for x := 0; x < shape; x++ {
			img.Set(x, y, colors[x+y*shape])
		}
	}

	return img
}
